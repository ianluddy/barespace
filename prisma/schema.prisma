// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Service {
  id          String      @id @default(uuid())
  name        String
  description String
  duration    Int         // Duration in minutes
  price       Float
  appointments Appointment[]
  staff       Staff[]     // Staff members who can perform this service
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Salon {
  id          String      @id @default(uuid())
  name        String
  address     String
  phone       String
  email       String
  description String
  imageUrl    String?
  staff       Staff[]
  appointments Appointment[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Staff {
  id          String      @id @default(uuid())
  name        String
  email       String
  phone       String
  title       String
  imageUrl    String?
  services    Service[]
  appointments Appointment[]
  salon       Salon       @relation(fields: [salonId], references: [id])
  salonId     String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Customer {
  id          String      @id @default(uuid())
  name        String?
  email       String      @unique
  phone       String?
  appointments Appointment[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

enum PaymentStatus {
  pending
  paid
  failed
  refunded
}

model Appointment {
  id          String    @id @default(uuid())
  date        DateTime
  startTime   DateTime
  endTime     DateTime
  status      String    @default("PENDING")
  service     Service   @relation(fields: [serviceId], references: [id])
  serviceId   String
  staff       Staff     @relation(fields: [staffId], references: [id])
  staffId     String
  customer    Customer  @relation(fields: [customerId], references: [id])
  customerId  String
  salon       Salon     @relation(fields: [salonId], references: [id])
  salonId     String
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  paymentStatus   PaymentStatus @default(pending)
  paymentAmount   Decimal?      @db.Decimal(10,2)
  paymentIntentId String?
}

// Status values: PENDING, CONFIRMED, CANCELLED, COMPLETED, NO_SHOW
